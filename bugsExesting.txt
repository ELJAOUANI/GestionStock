-bugs should to be fixed 
1- forgot password in frontend 
2- add this foreignId to employee table => $table->foreignId('user_id')->nullable()->constrained('users')->onDelete('cascade')->onUpdate('cascade');
3- spinner loading for category page 
4- Stock D'entre est ce que affecter directement a un group 
5- add Date d'achat au product ajouter / upload fournisseur bonCommande
6- Delete validation on group store 
7-Button upload , export Form actions=> template
8-state after inserting product
import React, { useState, useEffect } from 'react';

const StockSortieForm = () => {
  const [categories, setCategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedProduct, setSelectedProduct] = useState('');
  const [quantity, setQuantity] = useState('');

  useEffect(() => {
    // Fetch categories from your backend API
    // Replace the URL with your actual backend endpoint
    fetch('/api/categories')
      .then(response => response.json())
      .then(data => setCategories(data))
      .catch(error => console.error('Error fetching categories:', error));
  }, []);

  const handleCategoryChange = (e) => {
    const categoryValue = e.target.value;
    setSelectedCategory(categoryValue);

    // Fetch products based on the selected category from your backend API
    // Replace the URL with your actual backend endpoint
    fetch(`/api/products?category=${categoryValue}`)
      .then(response => response.json())
      .then(data => setProducts(data))
      .catch(error => console.error('Error fetching products:', error));
  };

  const handleSubmit = () => {
    // Add logic to submit the sortie de stock to your backend
    console.log('Category:', selectedCategory);
    console.log('Product:', selectedProduct);
    console.log('Quantity:', quantity);

    // Reset form or perform other actions as needed
    setSelectedCategory('');
    setSelectedProduct('');
    setQuantity('');
  };

  return (
    <div>
      <h2>Sortie de Stock</h2>
      <form>
        <label htmlFor="category">Category:</label>
        <select id="category" name="category" value={selectedCategory} onChange={handleCategoryChange}>
          <option value="">Select Category</option>
          {categories.map(category => (
            <option key={category.id} value={category.id}>{category.name}</option>
          ))}
        </select>

        <br />

        <label htmlFor="product">Product:</label>
        <select id="product" name="product" value={selectedProduct} onChange={(e) => setSelectedProduct(e.target.value)} disabled={!selectedCategory}>
          <option value="">Select Product</option>
          {products.map(product => (
            <option key={product.id} value={product.id}>{product.name}</option>
          ))}
        </select>

        <br />

        <label htmlFor="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value={quantity} onChange={(e) => setQuantity(e.target.value)} min="1" required />

        <br />

        <button type="button" onClick={handleSubmit}>Submit Stock</button>
      </form>
    </div>
  );
};

export default StockSortieForm;
